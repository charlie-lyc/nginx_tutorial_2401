% brew services stop nginx
Stopping `nginx`... (might take a while)
==> Successfully stopped `nginx` (label: homebrew.mxcl.nginx)

% brew services ls                
Name          Status User File
mysql         none        
nginx         none        
podman        none        
postgresql@14 none        
postgresql@15 none        
redis         none

--------------------------------------------------------------------------------

http://localhost:8080 으로 접속하면 
이전과 다르게 열리지 않는 것을 확인하고 
이 상태에서 아래의 과정을 진행

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
## [3] NodeJS(ExpressJS) server on NginX in Docker 일 경우

% mkdir nginx-docker-server
% cd nginx-docker-server
% npm init -y
% npm install express
...
% code index.js
...
const express = require('express')
const app = express()
app.get('/', (req, res) => {
    res.send('This is server on NginX within Docker.')
})
app.listen(9999, () => {
    console.log('listening on port 9999')
})
...
% code package.json
...
"start" : "node index"
...

--------------------------------------------------------------------------------
### /nginx-docker-server/nginx.conf

http {

    include mime.types;

    upstream backendserver {
        server 127.0.0.1:9999;
        server 127.0.0.1:8888;
        server 127.0.0.1:7777;
    }

    server {
        listen 8080;
        root /app;
        location / {
            proxy_pass http://backendserver/;
        }

    }

}

--------------------------------------------------------------------------------
### /nginx-docker/Dockerfile

# Stage 1
FROM node:20
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 9999
CMD ["node", "index.js"]

# Stage 2
FROM nginx
COPY nginx.conf /etc/nginx/conf.d/default.conf
EXPOSE 8080
CMD ["nginx", "-g", "daemon off;"]

--------------------------------------------------------------------------------

% docker build . -t <image name>
...
% docker run -p 1111:7777 -d --name <contaniner name> <image name>
...

--------------------------------------------------------------------------------

Type in browser : http://localhost:8080

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
## [4] 참고로 ReactJS application on NginX 일 경우

### /nignx.conf

server {
    listen 80;
    location / {
        root    /app/build;
        index   index.html;
	    try_files $uri $uri/ /index.html;
    }

}

--------------------------------------------------------------------------------
### /Dockerfile

# Use the official Node.js image from Docker Hub
FROM node:20

# Set the working directory inside the container
WORKDIR /app

# Copy only the package.json and package-lock.json (if exists) to leverage Docker cache
COPY package*.json ./

# Install project dependencies
RUN npm install

# Copy the rest of the application files to the container
COPY . .

# Set port number
EXPOSE 

# Set the default command to run the application
CMD ["npm", "start"]
# 또는
# CMD ["node", "index.js"]

--------------------------------------------------------------------------------
### /Dockerfile

# nginx 이미지를 사용합니다. 뒤에 tag가 없으면 latest 를 사용합니다.
FROM nginx

# root 에 app 폴더를 생성
RUN mkdir /app

# work dir 고정
WORKDIR /app

# work dir 에 build 폴더 생성 /app/build
RUN mkdir ./build

# host pc의 현재경로의 build 폴더를 workdir 의 build 폴더로 복사
ADD ./build ./build

# nginx 의 default.conf 를 삭제
RUN rm /etc/nginx/conf.d/default.conf

# host pc 의 nginx.conf 를 아래 경로에 복사
COPY ./nginx.conf /etc/nginx/conf.d

# 80 포트 오픈
EXPOSE 80

# container 실행 시 자동으로 실행할 command. nginx 시작함
CMD ["nginx", "-g", "daemon off;"]


--------------------------------------------------------------------------------
### /Dockerfile

# Stage 1: Build the React app
FROM node:20 as build

# Set the working directory
WORKDIR /app

# Copy package.json and package-lock.json
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy the rest of the application
COPY . .

# Build the app
RUN npm run build

# And then,

# Stage 2: Serve the app with Nginx
FROM nginx

# Copy the Nginx configuration file
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Copy the build output to the Nginx HTML directory
COPY --from=build /app/build /usr/share/nginx/html

# Expose port 80
EXPOSE 80

# Start Nginx
CMD ["nginx", "-g", "daemon off;"]




--------------------------------------------------------------------------------

% docker build . -t <image name>
...
% docker run -p 1111:7777 -d --name <contaniner name> <image name>
...

--------------------------------------------------------------------------------

Type in browser : http://localhost:8080

% cd /Users/charlie/Desktop/mysite
% mkdir server
% cd server
% code index.js

--------------------------------------------------------------------------------
// in terminal on vs code

% npm init -y
...

% npm install express
...

--------------------------------------------------------------------------------
// /Users/charlie/Desktop/mysite/server/package.json

...
"scripts": {
    "start": "npm run start"
}
...

--------------------------------------------------------------------------------

// /Users/charlie/Desktop/mysite/server/index.js

const express = require('express')

const app = express()

app.get('/', (req, res) => {
    res.send('I am an endpoint.')
})

app.listen(7777, () => {
    console.log('listening on port 7777')
})

--------------------------------------------------------------------------------
// in terminal on vs code

% npm start
> server@1.0.0 start
> node index.js

listening on port 7777

--------------------------------------------------------------------------------

Type in browser : http://localhost:7777

I am an endpoint.
--------------------------------------------------------------------------------

Search in Google : "dockerfile from expressjs app"

--------------------------------------------------------------------------------
### [1] NodeJS(ExpressJS) server 일 경우

### /Users/charlie/Desktop/mysite/server/Dockerfile

# Use the official Node.js image from Docker Hub
FROM node:20

# Set the working directory inside the container
WORKDIR /usr/src/app

# Copy only the package.json and package-lock.json (if exists) to leverage Docker cache
COPY package*.json ./

# Install project dependencies
RUN npm install

# Copy the rest of the application files to the container
COPY . .

# Set port number
EXPOSE 7777

# Set the default command to run the application
CMD ["npm", "start"]
# 또는
# CMD ["node", "index.js"]

--------------------------------------------------------------------------------
// in terminal on vs code

% docker build . -t myserver
ERROR: Cannot connect to the Docker daemon at unix:///Users/charlie/.docker/run/docker.sock. Is the docker daemon running? 
=> 데스크탑용 Docker를 켜고 다시 실행!!!

% docker build . -t myserver
[+] Building 45.6s (11/11) FINISHED                                                            docker:desktop-linux
 => [internal] load build definition from Dockerfile                                                           0.0s
 => => transferring dockerfile: 504B                                                                           0.0s
 => [internal] load metadata for docker.io/library/node:20                                                     2.7s
 => [auth] library/node:pull token for registry-1.docker.io                                                    0.0s
 => [internal] load .dockerignore                                                                              0.0s
 => => transferring context: 2B                                                                                0.0s
 => [1/5] FROM docker.io/library/node:20@sha256:ab71b9da5ba19445dc5bb76bf99c218941db2c4d70ff4de4e0d9ec90920b  42.0s
 => => resolve docker.io/library/node:20@sha256:ab71b9da5ba19445dc5bb76bf99c218941db2c4d70ff4de4e0d9ec90920bf  0.0s
 => => sha256:ab71b9da5ba19445dc5bb76bf99c218941db2c4d70ff4de4e0d9ec90920bfe3f 1.21kB / 1.21kB                 0.0s
 => => sha256:9524b78eaff678b74e246b1dec3290539cab0859ebcbacb458f8b956af9f75bc 2.00kB / 2.00kB                 0.0s
 => => sha256:2c6213d49b9c3530f5094b670f42e514b46410f6413fcb7d6c7efe5075618ddc 7.43kB / 7.43kB                 0.0s
 => => sha256:91e301773f03e9e0fabc5c177fe6bfe8daf14e992ab816f151692b814ddc462c 49.61MB / 49.61MB               8.7s
 => => sha256:15856ca26414127b85cee6d10acbc4cee6eba9070f3f5a04b9cc72ce95abfa7f 23.59MB / 23.59MB               8.6s
 => => sha256:30ed4c12791345d3f20f66024e1f22275ce507868c508509b83dcf231b1c9adc 63.99MB / 63.99MB              23.2s
 => => sha256:feb30c5ba2d151512d29ff4b92109a740559509ef6f3072a86c5006a1379397b 202.59MB / 202.59MB            36.6s
 => => extracting sha256:91e301773f03e9e0fabc5c177fe6bfe8daf14e992ab816f151692b814ddc462c                      1.3s
 => => sha256:aba0074d2a49ce1652f6a9bb7511352ff888b5cf24f38f69acb154d345951f2a 3.37kB / 3.37kB                 9.1s
 => => sha256:39076d46b9e2a23822a5e7a95bb8c34f7e474d994e30174cd9d000e3d3caa71f 47.97MB / 47.97MB              24.8s
 => => extracting sha256:15856ca26414127b85cee6d10acbc4cee6eba9070f3f5a04b9cc72ce95abfa7f                      0.3s
 => => extracting sha256:30ed4c12791345d3f20f66024e1f22275ce507868c508509b83dcf231b1c9adc                      1.5s
 => => sha256:d977d59ca1ba947adcaa6a92ea04646202d38d488d191ac930b97594e8ae5c30 1.25MB / 1.25MB                24.0s
 => => sha256:e08af096948111a9c19ce8df6c0a934d5b8db2dace7e3f75c02b59215c07bf32 449B / 449B                    24.3s
 => => extracting sha256:feb30c5ba2d151512d29ff4b92109a740559509ef6f3072a86c5006a1379397b                      3.8s
 => => extracting sha256:aba0074d2a49ce1652f6a9bb7511352ff888b5cf24f38f69acb154d345951f2a                      0.0s
 => => extracting sha256:39076d46b9e2a23822a5e7a95bb8c34f7e474d994e30174cd9d000e3d3caa71f                      1.2s
 => => extracting sha256:d977d59ca1ba947adcaa6a92ea04646202d38d488d191ac930b97594e8ae5c30                      0.0s
 => => extracting sha256:e08af096948111a9c19ce8df6c0a934d5b8db2dace7e3f75c02b59215c07bf32                      0.0s
 => [internal] load build context                                                                              0.1s
 => => transferring context: 2.21MB                                                                            0.1s
 => [2/5] WORKDIR /usr/src/app                                                                                 0.2s
 => [3/5] COPY package*.json ./                                                                                0.0s
 => [4/5] RUN npm install                                                                                      0.7s
 => [5/5] COPY . .                                                                                             0.0s
 => exporting to image                                                                                         0.0s
 => => exporting layers                                                                                        0.0s
 => => writing image sha256:ac5016e3a57bfd50c6e3f1818097e34c980aca87ca0c7dc095f656528746297f                   0.0s
 => => naming to docker.io/library/myserver                                                                    0.0s
View build details: docker-desktop://dashboard/build/desktop-linux/desktop-linux/x1uvwh5cwlkeckan0tez4wfbb
What's Next?
  View a summary of image vulnerabilities and recommendations → docker scout quickview

--------------------------------------------------------------------------------

=> 데스크탑용 Docker에서 'myserver' 라는 이미지가 생성된 것을 확인할 수 있다!!!

--------------------------------------------------------------------------------
// in terminal on vs code

// 포트 매핑   -> 다커 : 앱
% docker run -p 1111:7777 -d myserver
// 또는
% docker run -p 1111:7777 -d --name <contaniner name> myserver

--------------------------------------------------------------------------------

Type in browser : http://localhost:1111

I am an endpoint.
--------------------------------------------------------------------------------

### nginx.conf

http {

    # types {
    #    text/css   css;
    #    text/html html;
    # }
    include mime.types;

    upstream backendserver { # <===== Load Balancer !!!!!
        server 127.0.0.1:1111;
        server 127.0.0.1:2222;
        server 127.0.0.1:3333;
    }

    server {
        listen 8080;
        root /Users/charlie/Desktop/mysite;

        location / {         # <===== !!!!!
            proxy_pass http://backendserver/;
        }

        location /fruits {
            root /Users/charlie/Desktop/mysite;
        }

        location /carbs {
            # root /Users/charlie/Desktop/mysite;                 # 404 Not Found
            alias /Users/charlie/Desktop/mysite/fruits;
        }

        location /vegetables {
            root /Users/charlie/Desktop/mysite;                  # 403 Forbidden
            try_files /vegetables/veggies.html /index.html =404;
        }

        location ~* /count/[0-9] {
            root /Users/charlie/Desktop/mysite;
            try_files /index.html =404;
        }

        location /crops {
            return 307 /fruits; # Temporary redirect
        }

        rewrite ^/number/(\w+) /count/$1;

    }

}

events {}

--------------------------------------------------------------------------------
Before: Hello my friends. I am served form NginX.

Hard reload   http://localhost:8080

After: I am an endpoint.
--------------------------------------------------------------------------------

요약하면,

Docker at 1111 : Application at 7777
=> http://localhost:1111 통해서 "서버" 작동 확인 
=> I am an endpoint.

NginX at 8080 : Load Balancer at 1111, 2222, and 3333
=> http://localhost:8080 통해서 "로드 밸런서" 작동 확인
=> I am an endpoint.

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

### [2] ReactJS application 일 경우에는

% cd /Users/charlie/Desktop/mysite
% npm create-react-app reactapp
...
% cd reactapp

--------------------------------------------------------------------------------

### /Users/charlie/Desktop/mysite/reactapp/Dockerfile

# Use an official Node.js runtime as a parent image
FROM node:20

# Set the working directory in the container
WORKDIR /app

# Copy package.json and package-lock.json to the working directory
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy the rest of the application code to the working directory
COPY . .

# Build the React application
RUN npm run build

# Install a simple HTTP server to serve the static files
RUN npm install -g serve

# Expose the port the app runs on
EXPOSE 3000

# Set the command to run the app
CMD ["serve", "-s", "build"]

--------------------------------------------------------------------------------

% docker build . -t <image name>
...
% docker run -p 8080:3000 -d --name <contaniner name> <image name>
...

--------------------------------------------------------------------------------

Type in browser : http://localhost:8080

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
